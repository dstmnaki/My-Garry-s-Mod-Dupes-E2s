@name E2&SF Holo Outline 2
@inputs EGP:wirelink
@persist [Players2 E2s]:array
@outputs [Players2 E2s]:array

interval(1000)
if(first()|changed(players():count())){
    Players2=players()
    foreach(I,E:entity=Players2){
        if(E==owner()){
            Players2:removeEntity(I)
        }
    }
    timer("check",1000)
}

if(clk("check")){
    findIncludeClass("starfall_processor")
    findIncludeClass(entity():type())
    findInSphere(entity():pos(),1000000000)
    E2s=findToArray()
    E2s:pushEntity(entity())
    timer("check",1000)
}
if(first()|changed(Players2:count())|changed(EGP)|first()|changed(E2s:count())){
    EGP:egpClear()
    timer("check",1000)
    
    EGP:egpText(1,"E2&SF List by Naki",vec2(125,0))
    EGP:egpText(2,"Type : Name : Owner",vec2(125,20))
    EGP:egpAlign(1,1,0)
    EGP:egpAlign(2,1,0)
    foreach(I,E:entity=E2s){
        if(owner():pos():distance(E:pos())<100){
            E2s:remove(I)
            holoDelete(I)
        }
        holoCreate(I)
        holoPos(I,E:pos())
        holoAng(I,E:angles())
        holoModel(I,E:model())
        holoMaterial(I,"debug/debugspritewireframe")
        
        holoParent(I,E)
        holoVisible(I,Players2,0)
        holoVisible(I,owner(),1)
        holoScale(I,vec(1.05))
        
        if(E:type()=="starfall_processor"){
            Type="SF"
            Color=vec(255,0,255)
        }else{
            Type="E2"
            Color=vec(255,0,0)
        }
        
        holoColor(I,Color)
        
        I2=I+2
        EGP:egp3DTracker(I2+(E2s:count()*1),vec(0,0,0))
        EGP:egpText(I2+(E2s:count()*2),Type+" : "+E:getName()+" : "+E:owner():name(),vec2())

        EGP:egpParent(I2+(E2s:count()*1),E)
        EGP:egpParent(I2+(E2s:count()*2),I2+(E2s:count()*1))
        EGP:egpColor(I2+(E2s:count()*2),Color)
        
        EGP:egpText(I2+(E2s:count()*3),Type+" : "+E:getName()+" : "+E:owner():name(),vec2(5,20+(20*(I))))
        EGP:egpColor(I2+(E2s:count()*3),Color)
    }
}
